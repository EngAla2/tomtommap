{"ast":null,"code":"var _jsxFileName = \"M:\\\\main web site\\\\resturent\\\\distance-matrix-routing-with-tom-tom-api-main\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from 'react';\nimport * as tt from '@tomtom-international/web-sdk-maps';\nimport * as ttapi from '@tomtom-international/web-sdk-services';\nimport './App.css';\nimport '@tomtom-international/web-sdk-maps/dist/maps.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const mapElement = useRef();\n  const [map, setMap] = useState({});\n  const [longitude, setLongitude] = useState(36.09414873391526);\n  const [latitude, setLatitude] = useState(32.0608498750872); // const url = `https://api.tomtom.com/routing/1/calculateRoute/36.09414873391526%2C32.0608498750872%3A${longitude}%2C${latitude}/json?maxAlternatives=0&instructionsType=text&language=en-GB&computeBestOrder=false&routeRepresentation=polyline&computeTravelTimeFor=none&sectionType=travelMode&callback=callback&departAt=now&traffic=true&avoid=unpavedRoads&travelMode=car&vehicleMaxSpeed=0&vehicleWeight=0&vehicleAxleWeight=0&vehicleLength=0&vehicleWidth=0&vehicleHeight=0&vehicleCommercial=false&vehicleEngineType=combustion&key=BILqah1HZszHwuWV2lQW5EdE2gzOrKPy`\n\n  const url = \"https://api.tomtom.com/routing/1/calculateRoute/52.50931%2C13.42936%3A52.50274%2C13.43872/json?maxAlternatives=0&instructionsType=text&language=en-GB&computeBestOrder=false&routeRepresentation=polyline&computeTravelTimeFor=none&sectionType=travelMode&callback=callback&departAt=now&traffic=true&avoid=unpavedRoads&travelMode=car&vehicleMaxSpeed=0&vehicleWeight=0&vehicleAxleWeight=0&vehicleLength=0&vehicleWidth=0&vehicleHeight=0&vehicleCommercial=false&vehicleEngineType=combustion&key=BILqah1HZszHwuWV2lQW5EdE2gzOrKPy\";\n\n  const convertToPoints = lngLat => {\n    return {\n      point: {\n        latitude: lngLat.lat,\n        longitude: lngLat.lng\n      }\n    };\n  };\n\n  const drawRoute = (geoJson, map) => {\n    if (map.getLayer('route')) {\n      map.removeLayer('route');\n      map.removeSource('route');\n    } // map.addLayer({\n    //   id: 'route',\n    //   type: 'line',\n    //   source: {\n    //     type: 'geojson',\n    //     data: geoJson\n    //   },\n    //   paint: {\n    //     'line-color': '#4a90e2',\n    //     'line-width': 6\n    //   }\n    // })\n\n\n    console.log(map.dist);\n  };\n\n  const addDeliveryMarker = (lngLat, map) => {\n    const element = document.createElement('div');\n    element.className = 'marker-delivery';\n    console.log(lngLat);\n    new tt.Marker({\n      element: element\n    }).setLngLat(lngLat).addTo(map);\n  };\n\n  useEffect(() => {\n    const origin = {\n      lng: longitude,\n      lat: latitude\n    };\n    const destinations = [];\n    let map = tt.map({\n      key: \"BILqah1HZszHwuWV2lQW5EdE2gzOrKPy\",\n      container: mapElement.current,\n      stylesVisibility: {\n        trafficIncidents: true,\n        trafficFlow: true\n      },\n      center: [longitude, latitude],\n      zoom: 14\n    });\n    setMap(map);\n\n    const addMarker = () => {\n      const popupOffset = {\n        bottom: [0, -25]\n      };\n      const popup = new tt.Popup({\n        offset: popupOffset\n      }).setHTML('هنا المتجر');\n      const element = document.createElement('div');\n      element.className = 'marker';\n      const marker = new tt.Marker({\n        draggable: true,\n        element: element\n      }).setLngLat([longitude, latitude]).addTo(map);\n      marker.on('dragend', () => {\n        const lngLat = marker.getLngLat();\n        setLongitude(lngLat.lng);\n        setLatitude(lngLat.lat);\n      });\n      marker.setPopup(popup).togglePopup();\n    };\n\n    addMarker();\n\n    const sortDestinations = locations => {\n      const pointsForDestinations = locations.map(destination => {\n        return convertToPoints(destination);\n      });\n      const callParameters = {\n        key: \"BILqah1HZszHwuWV2lQW5EdE2gzOrKPy\",\n        destinations: pointsForDestinations,\n        origins: [convertToPoints(origin)]\n      };\n      return new Promise((resolve, reject) => {\n        ttapi.services.matrixRouting(callParameters).then(matrixAPIResults => {\n          const results = matrixAPIResults.matrix[0];\n          const resultsArray = results.map((result, index) => {\n            return {\n              location: locations[index],\n              drivingtime: result.response.routeSummary.travelTimeInSeconds\n            };\n          });\n          resultsArray.sort((a, b) => {\n            return a.drivingtime - b.drivingtime;\n          });\n          const sortedLocations = resultsArray.map(result => {\n            return result.location;\n          });\n          resolve(sortedLocations);\n        });\n      });\n    };\n\n    const recalculateRoutes = () => {\n      fetch(url).then(a => {\n        console.log(a.clone().json().routes); // console.log(a.lengthInMeters)\n        // console.log(a)\n        // console.log(a.clone().json())\n\n        return a.clone().json();\n      }).then(data => {\n        console.log(\"data::::\", data);\n      });\n      sortDestinations(destinations).then(sorted => {\n        sorted.unshift(origin);\n        ttapi.services.calculateRoute({\n          key: \"BILqah1HZszHwuWV2lQW5EdE2gzOrKPy\",\n          locations: sorted\n        }).then(routeData => {\n          const geoJson = routeData.toGeoJson();\n          drawRoute(geoJson, map);\n        });\n      });\n    };\n\n    map.on('click', e => {\n      destinations.push(e.lngLat);\n      addDeliveryMarker(e.lngLat, map);\n      recalculateRoutes();\n    });\n    return () => map.remove();\n  }, [longitude, latitude]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: map && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapElement,\n        className: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"PDbzQ8DU6s+sc3/XM8tEnuLLLmE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["M:/main web site/resturent/distance-matrix-routing-with-tom-tom-api-main/src/App.js"],"names":["useRef","useEffect","useState","tt","ttapi","App","mapElement","map","setMap","longitude","setLongitude","latitude","setLatitude","url","convertToPoints","lngLat","point","lat","lng","drawRoute","geoJson","getLayer","removeLayer","removeSource","console","log","dist","addDeliveryMarker","element","document","createElement","className","Marker","setLngLat","addTo","origin","destinations","key","container","current","stylesVisibility","trafficIncidents","trafficFlow","center","zoom","addMarker","popupOffset","bottom","popup","Popup","offset","setHTML","marker","draggable","on","getLngLat","setPopup","togglePopup","sortDestinations","locations","pointsForDestinations","destination","callParameters","origins","Promise","resolve","reject","services","matrixRouting","then","matrixAPIResults","results","matrix","resultsArray","result","index","location","drivingtime","response","routeSummary","travelTimeInSeconds","sort","a","b","sortedLocations","recalculateRoutes","fetch","clone","json","routes","data","sorted","unshift","calculateRoute","routeData","toGeoJson","e","push","remove"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAO,KAAKC,EAAZ,MAAoB,oCAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,wCAAvB;AACA,OAAO,WAAP;AACA,OAAO,kDAAP;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,UAAU,GAAGN,MAAM,EAAzB;AACA,QAAM,CAACO,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,iBAAD,CAA1C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,gBAAD,CAAxC,CAJgB,CAMhB;;AACA,QAAMW,GAAG,GAAG,ygBAAZ;;AAEA,QAAMC,eAAe,GAAIC,MAAD,IAAY;AAClC,WAAO;AACLC,MAAAA,KAAK,EAAE;AACLL,QAAAA,QAAQ,EAAEI,MAAM,CAACE,GADZ;AAELR,QAAAA,SAAS,EAAEM,MAAM,CAACG;AAFb;AADF,KAAP;AAMD,GAPD;;AASA,QAAMC,SAAS,GAAG,CAACC,OAAD,EAAUb,GAAV,KAAkB;AAClC,QAAIA,GAAG,CAACc,QAAJ,CAAa,OAAb,CAAJ,EAA2B;AACzBd,MAAAA,GAAG,CAACe,WAAJ,CAAgB,OAAhB;AACAf,MAAAA,GAAG,CAACgB,YAAJ,CAAiB,OAAjB;AACD,KAJiC,CAKlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAG,CAACmB,IAAhB;AACD,GAnBD;;AAqBA,QAAMC,iBAAiB,GAAG,CAACZ,MAAD,EAASR,GAAT,KAAiB;AACzC,UAAMqB,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;AACAF,IAAAA,OAAO,CAACG,SAAR,GAAoB,iBAApB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AAEA,QAAIZ,EAAE,CAAC6B,MAAP,CAAc;AACZJ,MAAAA,OAAO,EAAEA;AADG,KAAd,EAGCK,SAHD,CAGWlB,MAHX,EAICmB,KAJD,CAIO3B,GAJP;AAKD,GAVD;;AAYAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkC,MAAM,GAAG;AACbjB,MAAAA,GAAG,EAAET,SADQ;AAEbQ,MAAAA,GAAG,EAAEN;AAFQ,KAAf;AAIA,UAAMyB,YAAY,GAAG,EAArB;AAEA,QAAI7B,GAAG,GAAGJ,EAAE,CAACI,GAAH,CAAO;AACf8B,MAAAA,GAAG,EAAE,kCADU;AAEfC,MAAAA,SAAS,EAAEhC,UAAU,CAACiC,OAFP;AAGfC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,gBAAgB,EAAE,IADF;AAEhBC,QAAAA,WAAW,EAAE;AAFG,OAHH;AAOfC,MAAAA,MAAM,EAAE,CAAClC,SAAD,EAAYE,QAAZ,CAPO;AAQfiC,MAAAA,IAAI,EAAE;AARS,KAAP,CAAV;AAUApC,IAAAA,MAAM,CAACD,GAAD,CAAN;;AAEA,UAAMsC,SAAS,GAAG,MAAM;AACtB,YAAMC,WAAW,GAAG;AAClBC,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAC,EAAL;AADU,OAApB;AAGA,YAAMC,KAAK,GAAG,IAAI7C,EAAE,CAAC8C,KAAP,CAAa;AAAEC,QAAAA,MAAM,EAAEJ;AAAV,OAAb,EAAsCK,OAAtC,CAA8C,YAA9C,CAAd;AACA,YAAMvB,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;AACAF,MAAAA,OAAO,CAACG,SAAR,GAAoB,QAApB;AAEA,YAAMqB,MAAM,GAAG,IAAIjD,EAAE,CAAC6B,MAAP,CAAc;AAC3BqB,QAAAA,SAAS,EAAE,IADgB;AAE3BzB,QAAAA,OAAO,EAAEA;AAFkB,OAAd,EAIZK,SAJY,CAIF,CAACxB,SAAD,EAAYE,QAAZ,CAJE,EAKZuB,KALY,CAKN3B,GALM,CAAf;AAOA6C,MAAAA,MAAM,CAACE,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzB,cAAMvC,MAAM,GAAGqC,MAAM,CAACG,SAAP,EAAf;AACA7C,QAAAA,YAAY,CAACK,MAAM,CAACG,GAAR,CAAZ;AACAN,QAAAA,WAAW,CAACG,MAAM,CAACE,GAAR,CAAX;AACD,OAJD;AAMAmC,MAAAA,MAAM,CAACI,QAAP,CAAgBR,KAAhB,EAAuBS,WAAvB;AAED,KAvBD;;AAyBAZ,IAAAA,SAAS;;AAET,UAAMa,gBAAgB,GAAIC,SAAD,IAAe;AACtC,YAAMC,qBAAqB,GAAGD,SAAS,CAACpD,GAAV,CAAesD,WAAD,IAAiB;AAC3D,eAAO/C,eAAe,CAAC+C,WAAD,CAAtB;AACD,OAF6B,CAA9B;AAGA,YAAMC,cAAc,GAAG;AACrBzB,QAAAA,GAAG,EAAE,kCADgB;AAErBD,QAAAA,YAAY,EAAEwB,qBAFO;AAGrBG,QAAAA,OAAO,EAAE,CAACjD,eAAe,CAACqB,MAAD,CAAhB;AAHY,OAAvB;AAMF,aAAO,IAAI6B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC9D,QAAAA,KAAK,CAAC+D,QAAN,CACGC,aADH,CACiBN,cADjB,EAEGO,IAFH,CAESC,gBAAD,IAAsB;AAC1B,gBAAMC,OAAO,GAAGD,gBAAgB,CAACE,MAAjB,CAAwB,CAAxB,CAAhB;AACA,gBAAMC,YAAY,GAAGF,OAAO,CAAChE,GAAR,CAAY,CAACmE,MAAD,EAASC,KAAT,KAAmB;AAClD,mBAAO;AACLC,cAAAA,QAAQ,EAAEjB,SAAS,CAACgB,KAAD,CADd;AAELE,cAAAA,WAAW,EAAEH,MAAM,CAACI,QAAP,CAAgBC,YAAhB,CAA6BC;AAFrC,aAAP;AAID,WALoB,CAArB;AAMAP,UAAAA,YAAY,CAACQ,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1B,mBAAOD,CAAC,CAACL,WAAF,GAAgBM,CAAC,CAACN,WAAzB;AACD,WAFD;AAGA,gBAAMO,eAAe,GAAGX,YAAY,CAAClE,GAAb,CAAkBmE,MAAD,IAAY;AACnD,mBAAOA,MAAM,CAACE,QAAd;AACD,WAFuB,CAAxB;AAGAX,UAAAA,OAAO,CAACmB,eAAD,CAAP;AACD,SAjBH;AAkBC,OAnBI,CAAP;AAoBC,KA9BD;;AAgCA,UAAMC,iBAAiB,GAAG,MAAM;AAC9BC,MAAAA,KAAK,CAACzE,GAAD,CAAL,CACKwD,IADL,CACWa,CAAD,IAAM;AACV1D,QAAAA,OAAO,CAACC,GAAR,CAAYyD,CAAC,CAACK,KAAF,GAAUC,IAAV,GAAiBC,MAA7B,EADU,CAEV;AACA;AACA;;AACA,eAAOP,CAAC,CAACK,KAAF,GAAUC,IAAV,EAAP;AAED,OARL,EAQOnB,IARP,CAQYqB,IAAI,IAAI;AAEdlE,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBiE,IAAxB;AAED,OAZL;AAeAhC,MAAAA,gBAAgB,CAACtB,YAAD,CAAhB,CAA+BiC,IAA/B,CAAqCsB,MAAD,IAAY;AAC9CA,QAAAA,MAAM,CAACC,OAAP,CAAezD,MAAf;AAEA/B,QAAAA,KAAK,CAAC+D,QAAN,CACG0B,cADH,CACkB;AACdxD,UAAAA,GAAG,EAAE,kCADS;AAEdsB,UAAAA,SAAS,EAAEgC;AAFG,SADlB,EAKGtB,IALH,CAKSyB,SAAD,IAAe;AACnB,gBAAM1E,OAAO,GAAG0E,SAAS,CAACC,SAAV,EAAhB;AACA5E,UAAAA,SAAS,CAACC,OAAD,EAAUb,GAAV,CAAT;AACH,SARD;AASD,OAZD;AAaD,KA7BD;;AAgCAA,IAAAA,GAAG,CAAC+C,EAAJ,CAAO,OAAP,EAAiB0C,CAAD,IAAO;AACrB5D,MAAAA,YAAY,CAAC6D,IAAb,CAAkBD,CAAC,CAACjF,MAApB;AACAY,MAAAA,iBAAiB,CAACqE,CAAC,CAACjF,MAAH,EAAWR,GAAX,CAAjB;AACA8E,MAAAA,iBAAiB;AAElB,KALD;AAOA,WAAO,MAAM9E,GAAG,CAAC2F,MAAJ,EAAb;AACD,GAtHQ,EAsHN,CAACzF,SAAD,EAAYE,QAAZ,CAtHM,CAAT;AAwHA,sBACE;AAAA,cACGJ,GAAG,iBACF;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAK,QAAA,GAAG,EAAED,UAAV;AAAsB,QAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFJ,mBADF;AA8BD,CAzMD;;GAAMD,G;;KAAAA,G;AA2MN,eAAeA,GAAf","sourcesContent":["import { useRef, useEffect, useState } from 'react'\nimport * as tt from '@tomtom-international/web-sdk-maps'\nimport * as ttapi from '@tomtom-international/web-sdk-services'\nimport './App.css'\nimport '@tomtom-international/web-sdk-maps/dist/maps.css'\n\nconst App = () => {\n  const mapElement = useRef()\n  const [map, setMap] = useState({})\n  const [longitude, setLongitude] = useState(36.09414873391526)\n  const [latitude, setLatitude] = useState(32.0608498750872)\n\n  // const url = `https://api.tomtom.com/routing/1/calculateRoute/36.09414873391526%2C32.0608498750872%3A${longitude}%2C${latitude}/json?maxAlternatives=0&instructionsType=text&language=en-GB&computeBestOrder=false&routeRepresentation=polyline&computeTravelTimeFor=none&sectionType=travelMode&callback=callback&departAt=now&traffic=true&avoid=unpavedRoads&travelMode=car&vehicleMaxSpeed=0&vehicleWeight=0&vehicleAxleWeight=0&vehicleLength=0&vehicleWidth=0&vehicleHeight=0&vehicleCommercial=false&vehicleEngineType=combustion&key=BILqah1HZszHwuWV2lQW5EdE2gzOrKPy`\n  const url = \"https://api.tomtom.com/routing/1/calculateRoute/52.50931%2C13.42936%3A52.50274%2C13.43872/json?maxAlternatives=0&instructionsType=text&language=en-GB&computeBestOrder=false&routeRepresentation=polyline&computeTravelTimeFor=none&sectionType=travelMode&callback=callback&departAt=now&traffic=true&avoid=unpavedRoads&travelMode=car&vehicleMaxSpeed=0&vehicleWeight=0&vehicleAxleWeight=0&vehicleLength=0&vehicleWidth=0&vehicleHeight=0&vehicleCommercial=false&vehicleEngineType=combustion&key=BILqah1HZszHwuWV2lQW5EdE2gzOrKPy\"\n\n  const convertToPoints = (lngLat) => {\n    return {\n      point: {\n        latitude: lngLat.lat,\n        longitude: lngLat.lng\n      }\n    }\n  }\n\n  const drawRoute = (geoJson, map) => {\n    if (map.getLayer('route')) {\n      map.removeLayer('route')\n      map.removeSource('route')\n    }\n    // map.addLayer({\n    //   id: 'route',\n    //   type: 'line',\n    //   source: {\n    //     type: 'geojson',\n    //     data: geoJson\n    //   },\n    //   paint: {\n    //     'line-color': '#4a90e2',\n    //     'line-width': 6\n\n    //   }\n    // })\n    console.log(map.dist)\n  }\n\n  const addDeliveryMarker = (lngLat, map) => {\n    const element = document.createElement('div')\n    element.className = 'marker-delivery'\n    console.log(lngLat)\n\n    new tt.Marker({\n      element: element,\n    })\n    .setLngLat(lngLat)\n    .addTo(map)\n  }\n\n  useEffect(() => {\n    const origin = {\n      lng: longitude,\n      lat: latitude,\n    }\n    const destinations = []\n\n    let map = tt.map({\n      key: \"BILqah1HZszHwuWV2lQW5EdE2gzOrKPy\",\n      container: mapElement.current,\n      stylesVisibility: {\n        trafficIncidents: true,\n        trafficFlow: true,\n      },\n      center: [longitude, latitude],\n      zoom: 14,\n    })\n    setMap(map)\n\n    const addMarker = () => {\n      const popupOffset = {\n        bottom: [0, -25]\n      }\n      const popup = new tt.Popup({ offset: popupOffset }).setHTML('هنا المتجر')\n      const element = document.createElement('div')\n      element.className = 'marker'\n\n      const marker = new tt.Marker({\n        draggable: true,\n        element: element,\n      })\n        .setLngLat([longitude, latitude])\n        .addTo(map)\n\n      marker.on('dragend', () => {\n        const lngLat = marker.getLngLat()\n        setLongitude(lngLat.lng)\n        setLatitude(lngLat.lat)\n      })\n\n      marker.setPopup(popup).togglePopup()\n\n    }\n\n    addMarker()\n\n    const sortDestinations = (locations) => {\n      const pointsForDestinations = locations.map((destination) => {\n        return convertToPoints(destination)\n      })\n      const callParameters = {\n        key: \"BILqah1HZszHwuWV2lQW5EdE2gzOrKPy\",\n        destinations: pointsForDestinations,\n        origins: [convertToPoints(origin)],\n      }\n\n    return new Promise((resolve, reject) => {\n      ttapi.services\n        .matrixRouting(callParameters)\n        .then((matrixAPIResults) => {\n          const results = matrixAPIResults.matrix[0]\n          const resultsArray = results.map((result, index) => {\n            return {\n              location: locations[index],\n              drivingtime: result.response.routeSummary.travelTimeInSeconds,\n            }\n          })\n          resultsArray.sort((a, b) => {\n            return a.drivingtime - b.drivingtime\n          })\n          const sortedLocations = resultsArray.map((result) => {\n            return result.location\n          })\n          resolve(sortedLocations)\n        })\n      })\n    }\n\n    const recalculateRoutes = () => {\n      fetch(url)\n          .then((a)=> {\n            console.log(a.clone().json().routes)\n            // console.log(a.lengthInMeters)\n            // console.log(a)\n            // console.log(a.clone().json())\n            return a.clone().json()\n\n          }).then(data => {\n\n            console.log(\"data::::\", data)\n\n          })\n\n\n      sortDestinations(destinations).then((sorted) => {\n        sorted.unshift(origin)\n\n        ttapi.services\n          .calculateRoute({\n            key: \"BILqah1HZszHwuWV2lQW5EdE2gzOrKPy\",\n            locations: sorted,\n          })\n          .then((routeData) => {\n            const geoJson = routeData.toGeoJson()\n            drawRoute(geoJson, map)\n        })\n      })\n    }\n\n\n    map.on('click', (e) => {\n      destinations.push(e.lngLat)\n      addDeliveryMarker(e.lngLat, map)\n      recalculateRoutes()\n\n    })\n\n    return () => map.remove()\n  }, [longitude, latitude])\n\n  return (\n    <>\n      {map && (\n        <div className=\"app\">\n          <div ref={mapElement} className=\"map\" />\n           {/* <div className=\"search-bar\"> */}\n            {/* <h1>Where to?</h1> */}\n            {/* <input\n              type=\"text\"\n              id=\"longitude\"\n              className=\"longitude\"\n              placeholder=\"Put in Longitude\"\n              onChange={(e) => {\n                setLongitude(e.target.value)\n              }}\n            />\n            <input\n              type=\"text\"\n              id=\"latitude\"\n              className=\"latitude\"\n              placeholder=\"Put in latitude\"\n              onChange={(e) => {\n                setLatitude(e.target.value)\n              }}\n            /> */}\n          {/* </div> */}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}